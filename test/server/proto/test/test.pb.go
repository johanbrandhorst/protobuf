// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/test/test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/johanbrandhorst/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest_FailureType int32

const (
	PingRequest_NONE PingRequest_FailureType = 0
	PingRequest_CODE PingRequest_FailureType = 1
)

var PingRequest_FailureType_name = map[int32]string{
	0: "NONE",
	1: "CODE",
}

var PingRequest_FailureType_value = map[string]int32{
	"NONE": 0,
	"CODE": 1,
}

func (x PingRequest_FailureType) String() string {
	return proto.EnumName(PingRequest_FailureType_name, int32(x))
}

func (PingRequest_FailureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{1, 0}
}

type ExtraStuff struct {
	Addresses map[int32]string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Title:
	//	*ExtraStuff_FirstName
	//	*ExtraStuff_IdNumber
	Title                isExtraStuff_Title `protobuf_oneof:"title"`
	CardNumbers          []uint32           `protobuf:"varint,4,rep,packed,name=card_numbers,json=cardNumbers,proto3" json:"card_numbers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ExtraStuff) Reset()         { *m = ExtraStuff{} }
func (m *ExtraStuff) String() string { return proto.CompactTextString(m) }
func (*ExtraStuff) ProtoMessage()    {}
func (*ExtraStuff) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{0}
}

func (m *ExtraStuff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtraStuff.Unmarshal(m, b)
}
func (m *ExtraStuff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtraStuff.Marshal(b, m, deterministic)
}
func (m *ExtraStuff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraStuff.Merge(m, src)
}
func (m *ExtraStuff) XXX_Size() int {
	return xxx_messageInfo_ExtraStuff.Size(m)
}
func (m *ExtraStuff) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraStuff.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraStuff proto.InternalMessageInfo

func (m *ExtraStuff) GetAddresses() map[int32]string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type isExtraStuff_Title interface {
	isExtraStuff_Title()
}

type ExtraStuff_FirstName struct {
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3,oneof"`
}

type ExtraStuff_IdNumber struct {
	IdNumber int32 `protobuf:"varint,3,opt,name=id_number,json=idNumber,proto3,oneof"`
}

func (*ExtraStuff_FirstName) isExtraStuff_Title() {}

func (*ExtraStuff_IdNumber) isExtraStuff_Title() {}

func (m *ExtraStuff) GetTitle() isExtraStuff_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ExtraStuff) GetFirstName() string {
	if x, ok := m.GetTitle().(*ExtraStuff_FirstName); ok {
		return x.FirstName
	}
	return ""
}

func (m *ExtraStuff) GetIdNumber() int32 {
	if x, ok := m.GetTitle().(*ExtraStuff_IdNumber); ok {
		return x.IdNumber
	}
	return 0
}

func (m *ExtraStuff) GetCardNumbers() []uint32 {
	if m != nil {
		return m.CardNumbers
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtraStuff) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtraStuff_FirstName)(nil),
		(*ExtraStuff_IdNumber)(nil),
	}
}

type PingRequest struct {
	Value                string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ResponseCount        int32                   `protobuf:"varint,2,opt,name=response_count,json=responseCount,proto3" json:"response_count,omitempty"`
	ErrorCodeReturned    uint32                  `protobuf:"varint,3,opt,name=error_code_returned,json=errorCodeReturned,proto3" json:"error_code_returned,omitempty"`
	FailureType          PingRequest_FailureType `protobuf:"varint,4,opt,name=failure_type,json=failureType,proto3,enum=test.PingRequest_FailureType" json:"failure_type,omitempty"`
	CheckMetadata        bool                    `protobuf:"varint,5,opt,name=check_metadata,json=checkMetadata,proto3" json:"check_metadata,omitempty"`
	SendHeaders          bool                    `protobuf:"varint,6,opt,name=send_headers,json=sendHeaders,proto3" json:"send_headers,omitempty"`
	SendTrailers         bool                    `protobuf:"varint,7,opt,name=send_trailers,json=sendTrailers,proto3" json:"send_trailers,omitempty"`
	MessageLatencyMs     int32                   `protobuf:"varint,8,opt,name=message_latency_ms,json=messageLatencyMs,proto3" json:"message_latency_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{1}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingRequest) GetResponseCount() int32 {
	if m != nil {
		return m.ResponseCount
	}
	return 0
}

func (m *PingRequest) GetErrorCodeReturned() uint32 {
	if m != nil {
		return m.ErrorCodeReturned
	}
	return 0
}

func (m *PingRequest) GetFailureType() PingRequest_FailureType {
	if m != nil {
		return m.FailureType
	}
	return PingRequest_NONE
}

func (m *PingRequest) GetCheckMetadata() bool {
	if m != nil {
		return m.CheckMetadata
	}
	return false
}

func (m *PingRequest) GetSendHeaders() bool {
	if m != nil {
		return m.SendHeaders
	}
	return false
}

func (m *PingRequest) GetSendTrailers() bool {
	if m != nil {
		return m.SendTrailers
	}
	return false
}

func (m *PingRequest) GetMessageLatencyMs() int32 {
	if m != nil {
		return m.MessageLatencyMs
	}
	return 0
}

type PingResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Counter              int32    `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{2}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingResponse) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterEnum("test.PingRequest_FailureType", PingRequest_FailureType_name, PingRequest_FailureType_value)
	proto.RegisterType((*ExtraStuff)(nil), "test.ExtraStuff")
	proto.RegisterMapType((map[int32]string)(nil), "test.ExtraStuff.AddressesEntry")
	proto.RegisterType((*PingRequest)(nil), "test.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "test.PingResponse")
}

func init() { proto.RegisterFile("proto/test/test.proto", fileDescriptor_86be09eee3772da7) }

var fileDescriptor_86be09eee3772da7 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x4f, 0x1a, 0x4d,
	0x14, 0x65, 0x05, 0x14, 0x2e, 0x42, 0x70, 0xfc, 0xfc, 0xb2, 0xa1, 0x31, 0x22, 0x4d, 0x93, 0x7d,
	0x68, 0x16, 0x63, 0xd3, 0xc4, 0x9a, 0xda, 0x58, 0x28, 0x8d, 0x0f, 0x8a, 0xcd, 0x6a, 0xfa, 0xd0,
	0x97, 0xcd, 0xb0, 0x7b, 0x81, 0xd5, 0xfd, 0x41, 0x67, 0x66, 0x4d, 0xf7, 0xbf, 0xee, 0x4b, 0x5f,
	0x9a, 0x3e, 0x34, 0x33, 0xb3, 0x04, 0x6c, 0x4b, 0x82, 0x2f, 0x64, 0xee, 0x99, 0x73, 0xee, 0x3d,
	0x73, 0xd8, 0x19, 0xd8, 0x9b, 0xb1, 0x44, 0x24, 0x5d, 0x81, 0x5c, 0xa8, 0x1f, 0x5b, 0xd5, 0xa4,
	0x24, 0xd7, 0xad, 0x67, 0x93, 0x24, 0x99, 0x84, 0xd8, 0x55, 0xd8, 0x28, 0x1d, 0x77, 0x31, 0x9a,
	0x89, 0x4c, 0x53, 0x5a, 0x27, 0x93, 0x40, 0x4c, 0xd3, 0x91, 0xed, 0x25, 0x51, 0xf7, 0x2e, 0x99,
	0xd2, 0x78, 0xc4, 0x68, 0xec, 0x4f, 0x13, 0xc6, 0xc5, 0x42, 0xa0, 0xbb, 0x4f, 0x92, 0xd9, 0x14,
	0xd9, 0x1d, 0xd7, 0xca, 0xce, 0x0f, 0x03, 0x60, 0xf0, 0x4d, 0x30, 0x7a, 0x23, 0xd2, 0xf1, 0x98,
	0x9c, 0x41, 0x95, 0xfa, 0x3e, 0x43, 0xce, 0x91, 0x9b, 0x46, 0xbb, 0x68, 0xd5, 0x8e, 0x0f, 0x6c,
	0xe5, 0x65, 0x41, 0xb2, 0xdf, 0xcf, 0x19, 0x83, 0x58, 0xb0, 0xcc, 0x59, 0x28, 0xc8, 0x01, 0xc0,
	0x38, 0x60, 0x5c, 0xb8, 0x31, 0x8d, 0xd0, 0xdc, 0x68, 0x1b, 0x56, 0xf5, 0xa2, 0xe0, 0x54, 0x15,
	0x36, 0xa4, 0x11, 0x92, 0x7d, 0xa8, 0x06, 0xbe, 0x1b, 0xa7, 0xd1, 0x08, 0x99, 0x59, 0x6c, 0x1b,
	0x56, 0xf9, 0xa2, 0xe0, 0x54, 0x02, 0x7f, 0xa8, 0x10, 0x72, 0x08, 0xdb, 0x1e, 0x65, 0x73, 0x02,
	0x37, 0x4b, 0xed, 0xa2, 0x55, 0x77, 0x6a, 0x12, 0xd3, 0x0c, 0xde, 0x7a, 0x0b, 0x8d, 0xc7, 0xf3,
	0x49, 0x13, 0x8a, 0xf7, 0x98, 0x99, 0x86, 0xec, 0xe6, 0xc8, 0x25, 0xf9, 0x0f, 0xca, 0x0f, 0x34,
	0x4c, 0x73, 0x07, 0x8e, 0x2e, 0x4e, 0x37, 0x4e, 0x8c, 0xde, 0x16, 0x94, 0x45, 0x20, 0x42, 0xec,
	0xfc, 0xda, 0x80, 0xda, 0xa7, 0x20, 0x9e, 0x38, 0xf8, 0x35, 0x45, 0x2e, 0x16, 0x12, 0x63, 0x49,
	0x42, 0x5e, 0x40, 0x83, 0x21, 0x9f, 0x25, 0x31, 0x47, 0xd7, 0x4b, 0xd2, 0x58, 0xa8, 0x8e, 0x65,
	0xa7, 0x3e, 0x47, 0xfb, 0x12, 0x24, 0x36, 0xec, 0x22, 0x63, 0x09, 0x73, 0xbd, 0xc4, 0x47, 0x97,
	0xa1, 0x48, 0x59, 0x8c, 0xbe, 0x3a, 0x5f, 0xdd, 0xd9, 0x51, 0x5b, 0xfd, 0xc4, 0x47, 0x27, 0xdf,
	0x20, 0xe7, 0xb0, 0x3d, 0xa6, 0x41, 0x98, 0x32, 0x74, 0x45, 0x36, 0x43, 0xb3, 0xd4, 0x36, 0xac,
	0xc6, 0xf1, 0xbe, 0x0e, 0x7a, 0xc9, 0x95, 0xfd, 0x51, 0xb3, 0x6e, 0xb3, 0x19, 0x3a, 0xb5, 0xf1,
	0xa2, 0x90, 0xc6, 0xbc, 0x29, 0x7a, 0xf7, 0x6e, 0x84, 0x82, 0xfa, 0x54, 0x50, 0xb3, 0xdc, 0x36,
	0xac, 0x8a, 0x53, 0x57, 0xe8, 0x55, 0x0e, 0xca, 0x3c, 0x39, 0xc6, 0xbe, 0x3b, 0x45, 0xea, 0xcb,
	0x3c, 0x37, 0x15, 0xa9, 0x26, 0xb1, 0x0b, 0x0d, 0x91, 0xe7, 0x50, 0x57, 0x14, 0xc1, 0x68, 0x10,
	0x4a, 0xce, 0x96, 0xe2, 0x28, 0xdd, 0x6d, 0x8e, 0x91, 0x97, 0x40, 0x22, 0xe4, 0x9c, 0x4e, 0xd0,
	0x0d, 0xa9, 0xc0, 0xd8, 0xcb, 0xdc, 0x88, 0x9b, 0x15, 0x95, 0x45, 0x33, 0xdf, 0xb9, 0xd4, 0x1b,
	0x57, 0xbc, 0x73, 0x08, 0xb5, 0x25, 0xe3, 0xa4, 0x02, 0xa5, 0xe1, 0xf5, 0x70, 0xd0, 0x2c, 0xc8,
	0x55, 0xff, 0xfa, 0xc3, 0xa0, 0x69, 0x74, 0xde, 0xc1, 0xb6, 0x3e, 0xa7, 0x8e, 0x51, 0xc6, 0xff,
	0x79, 0x39, 0x7e, 0x55, 0x10, 0x13, 0xb6, 0x54, 0xea, 0xc8, 0xf2, 0xdc, 0xe7, 0xe5, 0xf1, 0xf7,
	0x22, 0xd4, 0x6e, 0x91, 0x8b, 0x1b, 0x64, 0x0f, 0x81, 0x87, 0xe4, 0x0d, 0x54, 0x65, 0xbf, 0x81,
	0xbc, 0x13, 0xe4, 0x7f, 0x5b, 0xdf, 0x15, 0x7b, 0xfe, 0xe9, 0xdb, 0x0a, 0x6f, 0x91, 0xe5, 0x80,
	0xf5, 0xe0, 0x4e, 0x81, 0x74, 0xa1, 0x24, 0x11, 0xb2, 0xf3, 0x57, 0xfc, 0x2b, 0x04, 0x27, 0xf9,
	0x2c, 0xf9, 0xb7, 0xfe, 0x4b, 0xb5, 0x62, 0x7c, 0xa7, 0x40, 0x5e, 0x43, 0x45, 0x12, 0x2f, 0x03,
	0x2e, 0xd6, 0x1e, 0x77, 0x64, 0x90, 0x33, 0x68, 0x4a, 0xac, 0x1f, 0x06, 0x18, 0x8b, 0x1b, 0xc1,
	0x90, 0x46, 0x6b, 0xcb, 0x2d, 0x83, 0xf4, 0x60, 0xef, 0x4f, 0xf9, 0x4a, 0xef, 0xab, 0x7a, 0x9c,
	0x41, 0x43, 0x62, 0xbd, 0xc0, 0x0f, 0x9e, 0x6c, 0xe0, 0x48, 0x5a, 0xd8, 0x7d, 0x2c, 0x7f, 0xaa,
	0x81, 0x23, 0xa3, 0x97, 0xfd, 0x3c, 0x3f, 0x5d, 0xe7, 0x99, 0x53, 0xcf, 0xa7, 0xa7, 0x0e, 0xdb,
	0x5d, 0x3c, 0xa8, 0x5f, 0xd6, 0xd7, 0x72, 0x64, 0x0f, 0xc8, 0x96, 0xb4, 0xa3, 0x4d, 0xb5, 0x7e,
	0xf5, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xce, 0xfa, 0xa4, 0x37, 0xa1, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingListClient, error)
	PingClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingClientStreamClient, error)
	PingClientStreamError(ctx context.Context, opts ...grpc.CallOption) (TestService_PingClientStreamErrorClient, error)
	PingBidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingBidiStreamClient, error)
	PingBidiStreamError(ctx context.Context, opts ...grpc.CallOption) (TestService_PingBidiStreamErrorClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/test.TestService/PingEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/test.TestService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.TestService/PingError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/test.TestService/PingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingListClient struct {
	grpc.ClientStream
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/test.TestService/PingClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingClientStreamClient{stream}
	return x, nil
}

type TestService_PingClientStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingClientStreamClient struct {
	grpc.ClientStream
}

func (x *testServicePingClientStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingClientStreamClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingClientStreamError(ctx context.Context, opts ...grpc.CallOption) (TestService_PingClientStreamErrorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[2], "/test.TestService/PingClientStreamError", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingClientStreamErrorClient{stream}
	return x, nil
}

type TestService_PingClientStreamErrorClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingClientStreamErrorClient struct {
	grpc.ClientStream
}

func (x *testServicePingClientStreamErrorClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingClientStreamErrorClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingBidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[3], "/test.TestService/PingBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingBidiStreamClient{stream}
	return x, nil
}

type TestService_PingBidiStreamClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingBidiStreamClient struct {
	grpc.ClientStream
}

func (x *testServicePingBidiStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingBidiStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingBidiStreamError(ctx context.Context, opts ...grpc.CallOption) (TestService_PingBidiStreamErrorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[4], "/test.TestService/PingBidiStreamError", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingBidiStreamErrorClient{stream}
	return x, nil
}

type TestService_PingBidiStreamErrorClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingBidiStreamErrorClient struct {
	grpc.ClientStream
}

func (x *testServicePingBidiStreamErrorClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingBidiStreamErrorClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	PingEmpty(context.Context, *empty.Empty) (*PingResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingError(context.Context, *PingRequest) (*empty.Empty, error)
	PingList(*PingRequest, TestService_PingListServer) error
	PingClientStream(TestService_PingClientStreamServer) error
	PingClientStreamError(TestService_PingClientStreamErrorServer) error
	PingBidiStream(TestService_PingBidiStreamServer) error
	PingBidiStreamError(TestService_PingBidiStreamErrorServer) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_PingEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/PingEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingEmpty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/PingError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingError(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).PingList(m, &testServicePingListServer{stream})
}

type TestService_PingListServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type testServicePingListServer struct {
	grpc.ServerStream
}

func (x *testServicePingListServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_PingClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingClientStream(&testServicePingClientStreamServer{stream})
}

type TestService_PingClientStreamServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingClientStreamServer struct {
	grpc.ServerStream
}

func (x *testServicePingClientStreamServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingClientStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_PingClientStreamError_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingClientStreamError(&testServicePingClientStreamErrorServer{stream})
}

type TestService_PingClientStreamErrorServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingClientStreamErrorServer struct {
	grpc.ServerStream
}

func (x *testServicePingClientStreamErrorServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingClientStreamErrorServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_PingBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingBidiStream(&testServicePingBidiStreamServer{stream})
}

type TestService_PingBidiStreamServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingBidiStreamServer struct {
	grpc.ServerStream
}

func (x *testServicePingBidiStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingBidiStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_PingBidiStreamError_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingBidiStreamError(&testServicePingBidiStreamErrorServer{stream})
}

type TestService_PingBidiStreamErrorServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingBidiStreamErrorServer struct {
	grpc.ServerStream
}

func (x *testServicePingBidiStreamErrorServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingBidiStreamErrorServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingEmpty",
			Handler:    _TestService_PingEmpty_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestService_Ping_Handler,
		},
		{
			MethodName: "PingError",
			Handler:    _TestService_PingError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingList",
			Handler:       _TestService_PingList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingClientStream",
			Handler:       _TestService_PingClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingClientStreamError",
			Handler:       _TestService_PingClientStreamError_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingBidiStream",
			Handler:       _TestService_PingBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PingBidiStreamError",
			Handler:       _TestService_PingBidiStreamError_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/test/test.proto",
}
