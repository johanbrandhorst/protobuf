// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/types.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/johanbrandhorst/protobuf/proto"
	multi "github.com/johanbrandhorst/protobuf/test/server/proto/multi"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ForeignEnum int32

const (
	ForeignEnum_FOREIGN_UNSPECIFIED ForeignEnum = 0
	ForeignEnum_FOREIGN_FOO         ForeignEnum = 4
	ForeignEnum_FOREIGN_BAR         ForeignEnum = 5
	ForeignEnum_FOREIGN_BAZ         ForeignEnum = 6
)

var ForeignEnum_name = map[int32]string{
	0: "FOREIGN_UNSPECIFIED",
	4: "FOREIGN_FOO",
	5: "FOREIGN_BAR",
	6: "FOREIGN_BAZ",
}

var ForeignEnum_value = map[string]int32{
	"FOREIGN_UNSPECIFIED": 0,
	"FOREIGN_FOO":         4,
	"FOREIGN_BAR":         5,
	"FOREIGN_BAZ":         6,
}

func (x ForeignEnum) String() string {
	return proto.EnumName(ForeignEnum_name, int32(x))
}

func (ForeignEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{0}
}

type MapEnum int32

const (
	MapEnum_MAP_ENUM_FOO MapEnum = 0
	MapEnum_MAP_ENUM_BAR MapEnum = 1
	MapEnum_MAP_ENUM_BAZ MapEnum = 2
)

var MapEnum_name = map[int32]string{
	0: "MAP_ENUM_FOO",
	1: "MAP_ENUM_BAR",
	2: "MAP_ENUM_BAZ",
}

var MapEnum_value = map[string]int32{
	"MAP_ENUM_FOO": 0,
	"MAP_ENUM_BAR": 1,
	"MAP_ENUM_BAZ": 2,
}

func (x MapEnum) String() string {
	return proto.EnumName(MapEnum_name, int32(x))
}

func (MapEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{1}
}

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_NESTED_ENUM_UNSPECIFIED TestAllTypes_NestedEnum = 0
	TestAllTypes_FOO                     TestAllTypes_NestedEnum = 1
	TestAllTypes_BAR                     TestAllTypes_NestedEnum = 2
	TestAllTypes_BAZ                     TestAllTypes_NestedEnum = 3
	TestAllTypes_NEG                     TestAllTypes_NestedEnum = -1
)

var TestAllTypes_NestedEnum_name = map[int32]string{
	0:  "NESTED_ENUM_UNSPECIFIED",
	1:  "FOO",
	2:  "BAR",
	3:  "BAZ",
	-1: "NEG",
}

var TestAllTypes_NestedEnum_value = map[string]int32{
	"NESTED_ENUM_UNSPECIFIED": 0,
	"FOO":                     1,
	"BAR":                     2,
	"BAZ":                     3,
	"NEG":                     -1,
}

func (x TestAllTypes_NestedEnum) String() string {
	return proto.EnumName(TestAllTypes_NestedEnum_name, int32(x))
}

func (TestAllTypes_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{0, 0}
}

// This proto includes every type of field in both singular and repeated
// forms.
type TestAllTypes struct {
	// Singular
	SingleInt32           int32                       `protobuf:"varint,1,opt,name=single_int32,json=singleInt32,proto3" json:"single_int32,omitempty"`
	SingleInt64           int64                       `protobuf:"varint,2,opt,name=single_int64,json=singleInt64,proto3" json:"single_int64,omitempty"`
	SingleUint32          uint32                      `protobuf:"varint,3,opt,name=single_uint32,json=singleUint32,proto3" json:"single_uint32,omitempty"`
	SingleUint64          uint64                      `protobuf:"varint,4,opt,name=single_uint64,json=singleUint64,proto3" json:"single_uint64,omitempty"`
	SingleSint32          int32                       `protobuf:"zigzag32,5,opt,name=single_sint32,json=singleSint32,proto3" json:"single_sint32,omitempty"`
	SingleSint64          int64                       `protobuf:"zigzag64,6,opt,name=single_sint64,json=singleSint64,proto3" json:"single_sint64,omitempty"`
	SingleFixed32         uint32                      `protobuf:"fixed32,7,opt,name=single_fixed32,json=singleFixed32,proto3" json:"single_fixed32,omitempty"`
	SingleFixed64         uint64                      `protobuf:"fixed64,8,opt,name=single_fixed64,json=singleFixed64,proto3" json:"single_fixed64,omitempty"`
	SingleSfixed32        int32                       `protobuf:"fixed32,9,opt,name=single_sfixed32,json=singleSfixed32,proto3" json:"single_sfixed32,omitempty"`
	SingleSfixed64        int64                       `protobuf:"fixed64,10,opt,name=single_sfixed64,json=singleSfixed64,proto3" json:"single_sfixed64,omitempty"`
	SingleFloat           float32                     `protobuf:"fixed32,11,opt,name=single_float,json=singleFloat,proto3" json:"single_float,omitempty"`
	SingleDouble          float64                     `protobuf:"fixed64,12,opt,name=single_double,json=singleDouble,proto3" json:"single_double,omitempty"`
	SingleBool            bool                        `protobuf:"varint,13,opt,name=single_bool,json=singleBool,proto3" json:"single_bool,omitempty"`
	SingleString          string                      `protobuf:"bytes,14,opt,name=single_string,json=singleString,proto3" json:"single_string,omitempty"`
	SingleBytes           []byte                      `protobuf:"bytes,15,opt,name=single_bytes,json=singleBytes,proto3" json:"single_bytes,omitempty"`
	SingleImportedMessage *multi.Multi1               `protobuf:"bytes,16,opt,name=single_imported_message,json=singleImportedMessage,proto3" json:"single_imported_message,omitempty"`
	SingleNestedMessage   *TestAllTypes_NestedMessage `protobuf:"bytes,18,opt,name=single_nested_message,json=singleNestedMessage,proto3" json:"single_nested_message,omitempty"`
	SingleForeignMessage  *ForeignMessage             `protobuf:"bytes,19,opt,name=single_foreign_message,json=singleForeignMessage,proto3" json:"single_foreign_message,omitempty"`
	SingleNestedEnum      TestAllTypes_NestedEnum     `protobuf:"varint,21,opt,name=single_nested_enum,json=singleNestedEnum,proto3,enum=types.TestAllTypes_NestedEnum" json:"single_nested_enum,omitempty"`
	SingleForeignEnum     ForeignEnum                 `protobuf:"varint,22,opt,name=single_foreign_enum,json=singleForeignEnum,proto3,enum=types.ForeignEnum" json:"single_foreign_enum,omitempty"`
	// Repeated
	RepeatedInt32           []int32                       `protobuf:"varint,31,rep,packed,name=repeated_int32,json=repeatedInt32,proto3" json:"repeated_int32,omitempty"`
	RepeatedInt64           []int64                       `protobuf:"varint,32,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedUint32          []uint32                      `protobuf:"varint,33,rep,packed,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedUint64          []uint64                      `protobuf:"varint,34,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedSint32          []int32                       `protobuf:"zigzag32,35,rep,packed,name=repeated_sint32,json=repeatedSint32,proto3" json:"repeated_sint32,omitempty"`
	RepeatedSint64          []int64                       `protobuf:"zigzag64,36,rep,packed,name=repeated_sint64,json=repeatedSint64,proto3" json:"repeated_sint64,omitempty"`
	RepeatedFixed32         []uint32                      `protobuf:"fixed32,37,rep,packed,name=repeated_fixed32,json=repeatedFixed32,proto3" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64         []uint64                      `protobuf:"fixed64,38,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32        []int32                       `protobuf:"fixed32,39,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32,proto3" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64        []int64                       `protobuf:"fixed64,40,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat           []float32                     `protobuf:"fixed32,41,rep,packed,name=repeated_float,json=repeatedFloat,proto3" json:"repeated_float,omitempty"`
	RepeatedDouble          []float64                     `protobuf:"fixed64,42,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
	RepeatedBool            []bool                        `protobuf:"varint,43,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedString          []string                      `protobuf:"bytes,44,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedBytes           [][]byte                      `protobuf:"bytes,45,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	RepeatedImportedMessage []*multi.Multi1               `protobuf:"bytes,46,rep,name=repeated_imported_message,json=repeatedImportedMessage,proto3" json:"repeated_imported_message,omitempty"`
	RepeatedNestedMessage   []*TestAllTypes_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message,json=repeatedNestedMessage,proto3" json:"repeated_nested_message,omitempty"`
	RepeatedForeignMessage  []*ForeignMessage             `protobuf:"bytes,49,rep,name=repeated_foreign_message,json=repeatedForeignMessage,proto3" json:"repeated_foreign_message,omitempty"`
	RepeatedNestedEnum      []TestAllTypes_NestedEnum     `protobuf:"varint,51,rep,packed,name=repeated_nested_enum,json=repeatedNestedEnum,proto3,enum=types.TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedForeignEnum     []ForeignEnum                 `protobuf:"varint,52,rep,packed,name=repeated_foreign_enum,json=repeatedForeignEnum,proto3,enum=types.ForeignEnum" json:"repeated_foreign_enum,omitempty"`
	// For oneof test
	//
	// Types that are valid to be assigned to OneofField:
	//	*TestAllTypes_OneofUint32
	//	*TestAllTypes_OneofNestedMessage
	//	*TestAllTypes_OneofString
	//	*TestAllTypes_OneofBytes
	//	*TestAllTypes_OneofImportedMessage
	OneofField           isTestAllTypes_OneofField `protobuf_oneof:"oneof_field"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TestAllTypes) Reset()         { *m = TestAllTypes{} }
func (m *TestAllTypes) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes) ProtoMessage()    {}
func (*TestAllTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{0}
}

func (m *TestAllTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes.Unmarshal(m, b)
}
func (m *TestAllTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes.Marshal(b, m, deterministic)
}
func (m *TestAllTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes.Merge(m, src)
}
func (m *TestAllTypes) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes.Size(m)
}
func (m *TestAllTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes proto.InternalMessageInfo

func (m *TestAllTypes) GetSingleInt32() int32 {
	if m != nil {
		return m.SingleInt32
	}
	return 0
}

func (m *TestAllTypes) GetSingleInt64() int64 {
	if m != nil {
		return m.SingleInt64
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint32() uint32 {
	if m != nil {
		return m.SingleUint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint64() uint64 {
	if m != nil {
		return m.SingleUint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint32() int32 {
	if m != nil {
		return m.SingleSint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint64() int64 {
	if m != nil {
		return m.SingleSint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed32() uint32 {
	if m != nil {
		return m.SingleFixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed64() uint64 {
	if m != nil {
		return m.SingleFixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed32() int32 {
	if m != nil {
		return m.SingleSfixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed64() int64 {
	if m != nil {
		return m.SingleSfixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFloat() float32 {
	if m != nil {
		return m.SingleFloat
	}
	return 0
}

func (m *TestAllTypes) GetSingleDouble() float64 {
	if m != nil {
		return m.SingleDouble
	}
	return 0
}

func (m *TestAllTypes) GetSingleBool() bool {
	if m != nil {
		return m.SingleBool
	}
	return false
}

func (m *TestAllTypes) GetSingleString() string {
	if m != nil {
		return m.SingleString
	}
	return ""
}

func (m *TestAllTypes) GetSingleBytes() []byte {
	if m != nil {
		return m.SingleBytes
	}
	return nil
}

func (m *TestAllTypes) GetSingleImportedMessage() *multi.Multi1 {
	if m != nil {
		return m.SingleImportedMessage
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedMessage() *TestAllTypes_NestedMessage {
	if m != nil {
		return m.SingleNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetSingleForeignMessage() *ForeignMessage {
	if m != nil {
		return m.SingleForeignMessage
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedEnum() TestAllTypes_NestedEnum {
	if m != nil {
		return m.SingleNestedEnum
	}
	return TestAllTypes_NESTED_ENUM_UNSPECIFIED
}

func (m *TestAllTypes) GetSingleForeignEnum() ForeignEnum {
	if m != nil {
		return m.SingleForeignEnum
	}
	return ForeignEnum_FOREIGN_UNSPECIFIED
}

func (m *TestAllTypes) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedImportedMessage() []*multi.Multi1 {
	if m != nil {
		return m.RepeatedImportedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedForeignMessage() []*ForeignMessage {
	if m != nil {
		return m.RepeatedForeignMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if m != nil {
		return m.RepeatedNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedForeignEnum() []ForeignEnum {
	if m != nil {
		return m.RepeatedForeignEnum
	}
	return nil
}

type isTestAllTypes_OneofField interface {
	isTestAllTypes_OneofField()
}

type TestAllTypes_OneofUint32 struct {
	OneofUint32 uint32 `protobuf:"varint,111,opt,name=oneof_uint32,json=oneofUint32,proto3,oneof"`
}

type TestAllTypes_OneofNestedMessage struct {
	OneofNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,112,opt,name=oneof_nested_message,json=oneofNestedMessage,proto3,oneof"`
}

type TestAllTypes_OneofString struct {
	OneofString string `protobuf:"bytes,113,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

type TestAllTypes_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,114,opt,name=oneof_bytes,json=oneofBytes,proto3,oneof"`
}

type TestAllTypes_OneofImportedMessage struct {
	OneofImportedMessage *multi.Multi1 `protobuf:"bytes,115,opt,name=oneof_imported_message,json=oneofImportedMessage,proto3,oneof"`
}

func (*TestAllTypes_OneofUint32) isTestAllTypes_OneofField() {}

func (*TestAllTypes_OneofNestedMessage) isTestAllTypes_OneofField() {}

func (*TestAllTypes_OneofString) isTestAllTypes_OneofField() {}

func (*TestAllTypes_OneofBytes) isTestAllTypes_OneofField() {}

func (*TestAllTypes_OneofImportedMessage) isTestAllTypes_OneofField() {}

func (m *TestAllTypes) GetOneofField() isTestAllTypes_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (m *TestAllTypes) GetOneofUint32() uint32 {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofUint32); ok {
		return x.OneofUint32
	}
	return 0
}

func (m *TestAllTypes) GetOneofNestedMessage() *TestAllTypes_NestedMessage {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofNestedMessage); ok {
		return x.OneofNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetOneofString() string {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (m *TestAllTypes) GetOneofBytes() []byte {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofBytes); ok {
		return x.OneofBytes
	}
	return nil
}

func (m *TestAllTypes) GetOneofImportedMessage() *multi.Multi1 {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofImportedMessage); ok {
		return x.OneofImportedMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestAllTypes) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestAllTypes_OneofUint32)(nil),
		(*TestAllTypes_OneofNestedMessage)(nil),
		(*TestAllTypes_OneofString)(nil),
		(*TestAllTypes_OneofBytes)(nil),
		(*TestAllTypes_OneofImportedMessage)(nil),
	}
}

type TestAllTypes_NestedMessage struct {
	B                    int32    `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestAllTypes_NestedMessage) Reset()         { *m = TestAllTypes_NestedMessage{} }
func (m *TestAllTypes_NestedMessage) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_NestedMessage) ProtoMessage()    {}
func (*TestAllTypes_NestedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{0, 0}
}

func (m *TestAllTypes_NestedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Unmarshal(m, b)
}
func (m *TestAllTypes_NestedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Marshal(b, m, deterministic)
}
func (m *TestAllTypes_NestedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes_NestedMessage.Merge(m, src)
}
func (m *TestAllTypes_NestedMessage) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Size(m)
}
func (m *TestAllTypes_NestedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes_NestedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes_NestedMessage proto.InternalMessageInfo

func (m *TestAllTypes_NestedMessage) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

// This proto includes a recusively nested message.
type NestedTestAllTypes struct {
	Child                *NestedTestAllTypes   `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Payload              *TestAllTypes         `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	RepeatedChild        []*NestedTestAllTypes `protobuf:"bytes,3,rep,name=repeated_child,json=repeatedChild,proto3" json:"repeated_child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NestedTestAllTypes) Reset()         { *m = NestedTestAllTypes{} }
func (m *NestedTestAllTypes) String() string { return proto.CompactTextString(m) }
func (*NestedTestAllTypes) ProtoMessage()    {}
func (*NestedTestAllTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{1}
}

func (m *NestedTestAllTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedTestAllTypes.Unmarshal(m, b)
}
func (m *NestedTestAllTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedTestAllTypes.Marshal(b, m, deterministic)
}
func (m *NestedTestAllTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedTestAllTypes.Merge(m, src)
}
func (m *NestedTestAllTypes) XXX_Size() int {
	return xxx_messageInfo_NestedTestAllTypes.Size(m)
}
func (m *NestedTestAllTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedTestAllTypes.DiscardUnknown(m)
}

var xxx_messageInfo_NestedTestAllTypes proto.InternalMessageInfo

func (m *NestedTestAllTypes) GetChild() *NestedTestAllTypes {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *NestedTestAllTypes) GetPayload() *TestAllTypes {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NestedTestAllTypes) GetRepeatedChild() []*NestedTestAllTypes {
	if m != nil {
		return m.RepeatedChild
	}
	return nil
}

// Define these after TestAllTypes to make sure the compiler can handle
// that.
type ForeignMessage struct {
	C                    int32    `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForeignMessage) Reset()         { *m = ForeignMessage{} }
func (m *ForeignMessage) String() string { return proto.CompactTextString(m) }
func (*ForeignMessage) ProtoMessage()    {}
func (*ForeignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{2}
}

func (m *ForeignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForeignMessage.Unmarshal(m, b)
}
func (m *ForeignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForeignMessage.Marshal(b, m, deterministic)
}
func (m *ForeignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignMessage.Merge(m, src)
}
func (m *ForeignMessage) XXX_Size() int {
	return xxx_messageInfo_ForeignMessage.Size(m)
}
func (m *ForeignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignMessage proto.InternalMessageInfo

func (m *ForeignMessage) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

// Tests maps.
type TestMap struct {
	MapInt32Int32           map[int32]int32           `protobuf:"bytes,1,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Int64           map[int64]int64           `protobuf:"bytes,2,rep,name=map_int64_int64,json=mapInt64Int64,proto3" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Uint32         map[uint32]uint32         `protobuf:"bytes,3,rep,name=map_uint32_uint32,json=mapUint32Uint32,proto3" json:"map_uint32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Uint64         map[uint64]uint64         `protobuf:"bytes,4,rep,name=map_uint64_uint64,json=mapUint64Uint64,proto3" json:"map_uint64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Sint32         map[int32]int32           `protobuf:"bytes,5,rep,name=map_sint32_sint32,json=mapSint32Sint32,proto3" json:"map_sint32_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapSint64Sint64         map[int64]int64           `protobuf:"bytes,6,rep,name=map_sint64_sint64,json=mapSint64Sint64,proto3" json:"map_sint64_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapFixed32Fixed32       map[uint32]uint32         `protobuf:"bytes,7,rep,name=map_fixed32_fixed32,json=mapFixed32Fixed32,proto3" json:"map_fixed32_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapFixed64Fixed64       map[uint64]uint64         `protobuf:"bytes,8,rep,name=map_fixed64_fixed64,json=mapFixed64Fixed64,proto3" json:"map_fixed64_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapSfixed32Sfixed32     map[int32]int32           `protobuf:"bytes,9,rep,name=map_sfixed32_sfixed32,json=mapSfixed32Sfixed32,proto3" json:"map_sfixed32_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapSfixed64Sfixed64     map[int64]int64           `protobuf:"bytes,10,rep,name=map_sfixed64_sfixed64,json=mapSfixed64Sfixed64,proto3" json:"map_sfixed64_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float           map[int32]float32         `protobuf:"bytes,11,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Double          map[int32]float64         `protobuf:"bytes,12,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapBoolBool             map[bool]bool             `protobuf:"bytes,13,rep,name=map_bool_bool,json=mapBoolBool,proto3" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringString         map[string]string         `protobuf:"bytes,14,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes           map[int32][]byte          `protobuf:"bytes,15,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Enum            map[int32]MapEnum         `protobuf:"bytes,16,rep,name=map_int32_enum,json=mapInt32Enum,proto3" json:"map_int32_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=types.MapEnum"`
	MapInt32ForeignMessage  map[int32]*ForeignMessage `protobuf:"bytes,17,rep,name=map_int32_foreign_message,json=mapInt32ForeignMessage,proto3" json:"map_int32_foreign_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32ImportedMessage map[int32]*multi.Multi1   `protobuf:"bytes,18,rep,name=map_int32_imported_message,json=mapInt32ImportedMessage,proto3" json:"map_int32_imported_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}                  `json:"-"`
	XXX_unrecognized        []byte                    `json:"-"`
	XXX_sizecache           int32                     `json:"-"`
}

func (m *TestMap) Reset()         { *m = TestMap{} }
func (m *TestMap) String() string { return proto.CompactTextString(m) }
func (*TestMap) ProtoMessage()    {}
func (*TestMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0f90c600ad7e2e, []int{3}
}

func (m *TestMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMap.Unmarshal(m, b)
}
func (m *TestMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMap.Marshal(b, m, deterministic)
}
func (m *TestMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMap.Merge(m, src)
}
func (m *TestMap) XXX_Size() int {
	return xxx_messageInfo_TestMap.Size(m)
}
func (m *TestMap) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMap.DiscardUnknown(m)
}

var xxx_messageInfo_TestMap proto.InternalMessageInfo

func (m *TestMap) GetMapInt32Int32() map[int32]int32 {
	if m != nil {
		return m.MapInt32Int32
	}
	return nil
}

func (m *TestMap) GetMapInt64Int64() map[int64]int64 {
	if m != nil {
		return m.MapInt64Int64
	}
	return nil
}

func (m *TestMap) GetMapUint32Uint32() map[uint32]uint32 {
	if m != nil {
		return m.MapUint32Uint32
	}
	return nil
}

func (m *TestMap) GetMapUint64Uint64() map[uint64]uint64 {
	if m != nil {
		return m.MapUint64Uint64
	}
	return nil
}

func (m *TestMap) GetMapSint32Sint32() map[int32]int32 {
	if m != nil {
		return m.MapSint32Sint32
	}
	return nil
}

func (m *TestMap) GetMapSint64Sint64() map[int64]int64 {
	if m != nil {
		return m.MapSint64Sint64
	}
	return nil
}

func (m *TestMap) GetMapFixed32Fixed32() map[uint32]uint32 {
	if m != nil {
		return m.MapFixed32Fixed32
	}
	return nil
}

func (m *TestMap) GetMapFixed64Fixed64() map[uint64]uint64 {
	if m != nil {
		return m.MapFixed64Fixed64
	}
	return nil
}

func (m *TestMap) GetMapSfixed32Sfixed32() map[int32]int32 {
	if m != nil {
		return m.MapSfixed32Sfixed32
	}
	return nil
}

func (m *TestMap) GetMapSfixed64Sfixed64() map[int64]int64 {
	if m != nil {
		return m.MapSfixed64Sfixed64
	}
	return nil
}

func (m *TestMap) GetMapInt32Float() map[int32]float32 {
	if m != nil {
		return m.MapInt32Float
	}
	return nil
}

func (m *TestMap) GetMapInt32Double() map[int32]float64 {
	if m != nil {
		return m.MapInt32Double
	}
	return nil
}

func (m *TestMap) GetMapBoolBool() map[bool]bool {
	if m != nil {
		return m.MapBoolBool
	}
	return nil
}

func (m *TestMap) GetMapStringString() map[string]string {
	if m != nil {
		return m.MapStringString
	}
	return nil
}

func (m *TestMap) GetMapInt32Bytes() map[int32][]byte {
	if m != nil {
		return m.MapInt32Bytes
	}
	return nil
}

func (m *TestMap) GetMapInt32Enum() map[int32]MapEnum {
	if m != nil {
		return m.MapInt32Enum
	}
	return nil
}

func (m *TestMap) GetMapInt32ForeignMessage() map[int32]*ForeignMessage {
	if m != nil {
		return m.MapInt32ForeignMessage
	}
	return nil
}

func (m *TestMap) GetMapInt32ImportedMessage() map[int32]*multi.Multi1 {
	if m != nil {
		return m.MapInt32ImportedMessage
	}
	return nil
}

func init() {
	proto.RegisterEnum("types.ForeignEnum", ForeignEnum_name, ForeignEnum_value)
	proto.RegisterEnum("types.MapEnum", MapEnum_name, MapEnum_value)
	proto.RegisterEnum("types.TestAllTypes_NestedEnum", TestAllTypes_NestedEnum_name, TestAllTypes_NestedEnum_value)
	proto.RegisterType((*TestAllTypes)(nil), "types.TestAllTypes")
	proto.RegisterType((*TestAllTypes_NestedMessage)(nil), "types.TestAllTypes.NestedMessage")
	proto.RegisterType((*NestedTestAllTypes)(nil), "types.NestedTestAllTypes")
	proto.RegisterType((*ForeignMessage)(nil), "types.ForeignMessage")
	proto.RegisterType((*TestMap)(nil), "types.TestMap")
	proto.RegisterMapType((map[bool]bool)(nil), "types.TestMap.MapBoolBoolEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "types.TestMap.MapFixed32Fixed32Entry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "types.TestMap.MapFixed64Fixed64Entry")
	proto.RegisterMapType((map[int32][]byte)(nil), "types.TestMap.MapInt32BytesEntry")
	proto.RegisterMapType((map[int32]float64)(nil), "types.TestMap.MapInt32DoubleEntry")
	proto.RegisterMapType((map[int32]MapEnum)(nil), "types.TestMap.MapInt32EnumEntry")
	proto.RegisterMapType((map[int32]float32)(nil), "types.TestMap.MapInt32FloatEntry")
	proto.RegisterMapType((map[int32]*ForeignMessage)(nil), "types.TestMap.MapInt32ForeignMessageEntry")
	proto.RegisterMapType((map[int32]*multi.Multi1)(nil), "types.TestMap.MapInt32ImportedMessageEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "types.TestMap.MapInt32Int32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "types.TestMap.MapInt64Int64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "types.TestMap.MapSfixed32Sfixed32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "types.TestMap.MapSfixed64Sfixed64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "types.TestMap.MapSint32Sint32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "types.TestMap.MapSint64Sint64Entry")
	proto.RegisterMapType((map[string]string)(nil), "types.TestMap.MapStringStringEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "types.TestMap.MapUint32Uint32Entry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "types.TestMap.MapUint64Uint64Entry")
}

func init() { proto.RegisterFile("types/types.proto", fileDescriptor_2c0f90c600ad7e2e) }

var fileDescriptor_2c0f90c600ad7e2e = []byte{
	// 1766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0xeb, 0x52, 0xe3, 0xc8,
	0x15, 0xc7, 0x2d, 0x84, 0x31, 0x1c, 0xdf, 0xe4, 0x36, 0x17, 0x0d, 0x9b, 0xec, 0xf4, 0x98, 0x25,
	0xf4, 0xc2, 0x62, 0xb2, 0x46, 0xa5, 0xda, 0xda, 0x0f, 0xc9, 0xe0, 0xc1, 0x5e, 0xa8, 0xac, 0x61,
	0x4a, 0x1e, 0x52, 0xb5, 0x93, 0x4a, 0x11, 0x1b, 0x04, 0x78, 0x62, 0x5b, 0x8e, 0x2f, 0x93, 0xf0,
	0x62, 0x79, 0x89, 0x3c, 0x4a, 0xde, 0x20, 0x5f, 0xb2, 0xd5, 0x17, 0x49, 0xdd, 0x6d, 0xd9, 0xc3,
	0x54, 0x8d, 0x6c, 0x1f, 0x9d, 0xfe, 0xf5, 0xd1, 0x51, 0xff, 0xcf, 0xe9, 0x06, 0x4a, 0xd3, 0xe7,
	0x91, 0x3f, 0x39, 0x61, 0xd7, 0xea, 0x68, 0x1c, 0x4c, 0x03, 0x94, 0x66, 0x3f, 0x76, 0xd1, 0x60,
	0xd6, 0x9f, 0xf6, 0x4e, 0xd8, 0xf5, 0x7b, 0x7e, 0x6b, 0xf7, 0x87, 0xc7, 0xde, 0xf4, 0x69, 0xd6,
	0xad, 0xde, 0x05, 0x83, 0x93, 0x4f, 0xc1, 0x53, 0x67, 0xd8, 0x1d, 0x77, 0x86, 0xf7, 0x4f, 0xc1,
	0x78, 0x32, 0x3d, 0x61, 0x1e, 0xdd, 0xd9, 0x03, 0xff, 0x72, 0xf2, 0x18, 0x8c, 0x9e, 0xfc, 0xf1,
	0x27, 0x01, 0xad, 0xfc, 0x07, 0x41, 0xee, 0x83, 0x3f, 0x99, 0x9e, 0xf5, 0xfb, 0x1f, 0x28, 0x1e,
	0xbd, 0x81, 0xdc, 0xa4, 0x37, 0x7c, 0xec, 0xfb, 0xb7, 0xbd, 0xe1, 0xf4, 0xb4, 0x66, 0x1b, 0xd8,
	0x20, 0x69, 0x2f, 0xcb, 0x6d, 0x97, 0xd4, 0xa4, 0xba, 0xb8, 0x8e, 0xbd, 0x82, 0x0d, 0x62, 0x4a,
	0x2e, 0xae, 0x83, 0xf6, 0x20, 0x2f, 0x5c, 0x66, 0x1c, 0x63, 0x62, 0x83, 0xe4, 0x3d, 0x31, 0xee,
	0x86, 0xd9, 0x34, 0x27, 0xd7, 0xb1, 0x57, 0xb1, 0x41, 0x56, 0x65, 0x27, 0x85, 0x34, 0xe1, 0xa4,
	0x34, 0x36, 0x48, 0x29, 0x74, 0x6a, 0xeb, 0xa4, 0x09, 0x27, 0xad, 0x61, 0x83, 0x20, 0xd9, 0xc9,
	0x75, 0xd0, 0x3e, 0x14, 0x84, 0xd3, 0x43, 0xef, 0x5f, 0xfe, 0xfd, 0x69, 0xcd, 0xce, 0x60, 0x83,
	0x64, 0x3c, 0x31, 0xb4, 0xc9, 0x8d, 0xba, 0x9b, 0xeb, 0xd8, 0xeb, 0xd8, 0x20, 0x6b, 0x8a, 0x9b,
	0xeb, 0xa0, 0x03, 0x28, 0x86, 0x53, 0x86, 0xb8, 0x0d, 0x6c, 0x90, 0xa2, 0x27, 0x46, 0xb7, 0x85,
	0x75, 0xce, 0xd1, 0x75, 0x6c, 0xc0, 0x06, 0xb1, 0x54, 0x47, 0xd7, 0x91, 0xd2, 0xfa, 0xd0, 0x0f,
	0x3a, 0x53, 0x3b, 0x8b, 0x0d, 0xb2, 0x12, 0xa6, 0xb5, 0x49, 0x4d, 0xd2, 0x73, 0xde, 0x07, 0xb3,
	0x6e, 0xdf, 0xb7, 0x73, 0xd8, 0x20, 0x46, 0xf8, 0x9c, 0xe7, 0xcc, 0x86, 0x5e, 0x83, 0x18, 0x73,
	0xdb, 0x0d, 0x82, 0xbe, 0x9d, 0xc7, 0x06, 0x59, 0xf7, 0x80, 0x9b, 0xea, 0x41, 0xd0, 0x97, 0xb3,
	0x35, 0x1d, 0xf7, 0x86, 0x8f, 0x76, 0x01, 0x1b, 0x64, 0x23, 0xca, 0x16, 0xb3, 0x49, 0xd1, 0x74,
	0x9f, 0xa7, 0xfe, 0xc4, 0x2e, 0x62, 0x83, 0xe4, 0xc2, 0x68, 0xea, 0xd4, 0x84, 0x2e, 0x61, 0x27,
	0x5c, 0x07, 0x83, 0x51, 0x30, 0x9e, 0xfa, 0xf7, 0xb7, 0x03, 0x7f, 0x32, 0xe9, 0x3c, 0xfa, 0xb6,
	0x85, 0x0d, 0x92, 0xad, 0x95, 0xaa, 0x6c, 0x95, 0x4e, 0xfd, 0xc9, 0xb4, 0xda, 0x62, 0xeb, 0xd5,
	0xdb, 0x12, 0xab, 0x44, 0x0c, 0x68, 0x71, 0x7f, 0x74, 0x03, 0xe2, 0xc6, 0xed, 0xd0, 0x9f, 0xc8,
	0x20, 0xc4, 0x40, 0x6f, 0xaa, 0x5c, 0x08, 0xf2, 0x4a, 0xad, 0x5e, 0x31, 0x4f, 0x41, 0xf0, 0xca,
	0x7c, 0xbc, 0x62, 0x44, 0x7f, 0x82, 0xed, 0x30, 0xa5, 0xc1, 0xd8, 0xef, 0x3d, 0x0e, 0x23, 0x6e,
	0x99, 0x71, 0xb7, 0x04, 0xb7, 0xc9, 0xef, 0x86, 0xac, 0x4d, 0x91, 0x73, 0xc5, 0x8a, 0x7e, 0x06,
	0xa4, 0xc6, 0xe8, 0x0f, 0x67, 0x03, 0x7b, 0x0b, 0x1b, 0xa4, 0x50, 0xfb, 0x7a, 0x71, 0x80, 0x8d,
	0xe1, 0x6c, 0xe0, 0x59, 0x72, 0x74, 0xd4, 0x82, 0xea, 0x50, 0xd6, 0x42, 0x63, 0xb8, 0x6d, 0x86,
	0x43, 0x6a, 0x5c, 0x0c, 0x51, 0x52, 0x82, 0x62, 0x8c, 0x7d, 0x28, 0x8c, 0xfd, 0x91, 0xdf, 0xa1,
	0xc1, 0x70, 0x71, 0xbc, 0xc6, 0x26, 0x49, 0x7b, 0xf9, 0xd0, 0xca, 0xf5, 0xaa, 0xb9, 0xb9, 0x8e,
	0x8d, 0xb1, 0x49, 0x4c, 0xc5, 0x8d, 0xaf, 0xe8, 0xc8, 0x4d, 0xa8, 0xf6, 0x0d, 0x36, 0x49, 0xde,
	0x8b, 0x46, 0x0b, 0xdd, 0xea, 0x8e, 0xae, 0x63, 0x57, 0xb0, 0x49, 0x56, 0x55, 0x47, 0x8d, 0x28,
	0xd4, 0xbb, 0x87, 0x4d, 0x52, 0x8a, 0x1d, 0xdb, 0xf3, 0x44, 0xa1, 0xe0, 0x6f, 0xb0, 0x49, 0x90,
	0xea, 0xe8, 0x3a, 0xe8, 0x5b, 0xb0, 0x22, 0xc7, 0x50, 0x76, 0xfb, 0xd8, 0x24, 0x19, 0x2f, 0x02,
	0x84, 0x3a, 0x9e, 0x73, 0x75, 0x1d, 0xfb, 0x77, 0xd8, 0x24, 0x6b, 0x9a, 0xab, 0xeb, 0xa0, 0x23,
	0x28, 0xc5, 0xd3, 0x87, 0xd8, 0x03, 0x6c, 0x92, 0xa2, 0x17, 0x31, 0x22, 0x3d, 0xcf, 0x3b, 0xbb,
	0x8e, 0x4d, 0xb0, 0x49, 0x2c, 0xdd, 0x99, 0xd7, 0x9c, 0x38, 0x08, 0xa6, 0xea, 0x6f, 0xb1, 0x49,
	0x56, 0xe2, 0xd4, 0x73, 0x5d, 0xcb, 0xcf, 0x2f, 0x94, 0x7d, 0x88, 0x4d, 0x62, 0xc4, 0xcf, 0x2f,
	0xb4, 0xbd, 0x07, 0xd1, 0x48, 0xae, 0xee, 0x23, 0x6c, 0x92, 0x75, 0x2f, 0x17, 0x1a, 0x99, 0xbe,
	0x95, 0x6c, 0x72, 0x85, 0x7f, 0x87, 0x4d, 0xb2, 0x21, 0x65, 0x93, 0x6b, 0x5c, 0x8e, 0x8e, 0xab,
	0xfc, 0x18, 0x9b, 0x24, 0x17, 0x47, 0xc7, 0x75, 0xde, 0x82, 0x57, 0xf1, 0xfa, 0xd1, 0x95, 0x5e,
	0xc5, 0x66, 0xb2, 0xd2, 0x77, 0xa2, 0xd5, 0xa5, 0x69, 0xfd, 0x17, 0x88, 0x6e, 0xe9, 0x6a, 0xff,
	0x3d, 0x83, 0xbd, 0x40, 0xed, 0x5b, 0x21, 0x41, 0xd5, 0xfb, 0x35, 0xd8, 0x71, 0xba, 0x35, 0xc5,
	0x7f, 0xcf, 0xd8, 0x0b, 0x14, 0xbf, 0x1d, 0xbd, 0x0f, 0x55, 0xf3, 0xef, 0x61, 0x53, 0x8f, 0x95,
	0xc9, 0xf4, 0x14, 0x9b, 0x2f, 0x50, 0x3d, 0x52, 0xa3, 0x64, 0x9a, 0x6d, 0xc2, 0xd6, 0x5c, 0x88,
	0x0c, 0xe9, 0x30, 0x64, 0x92, 0xf2, 0xcb, 0x5a, 0x70, 0x8c, 0xb3, 0x07, 0xb9, 0x60, 0xe8, 0x07,
	0x0f, 0xa1, 0x54, 0x03, 0xda, 0x60, 0x2f, 0x52, 0x5e, 0x96, 0x59, 0x85, 0x52, 0x6f, 0x60, 0x93,
	0x3b, 0x69, 0x79, 0x1e, 0xbd, 0xb0, 0xaa, 0x5e, 0xa4, 0x3c, 0xc4, 0x00, 0x6a, 0x9a, 0xa3, 0xb9,
	0xc5, 0xea, 0xfa, 0x07, 0xed, 0x1f, 0xd1, 0xdc, 0x51, 0x03, 0xe1, 0x3f, 0xc5, 0xca, 0x1a, 0xd3,
	0xfe, 0x71, 0x91, 0xf2, 0x80, 0x19, 0xc3, 0x06, 0xb2, 0xcd, 0x5d, 0xe6, 0x56, 0xd5, 0x64, 0x41,
	0xff, 0xb8, 0x48, 0x79, 0xfc, 0x89, 0xb4, 0x45, 0xb5, 0xfb, 0x5b, 0xc8, 0xab, 0x31, 0xe6, 0xc0,
	0xe8, 0x8a, 0xcd, 0x8b, 0xd1, 0xad, 0xfc, 0x19, 0x40, 0x7a, 0x07, 0x5f, 0xc1, 0xce, 0x55, 0xa3,
	0xfd, 0xa1, 0x71, 0x7e, 0xdb, 0xb8, 0xba, 0x69, 0xdd, 0xde, 0x5c, 0xb5, 0xdf, 0x37, 0xde, 0x5d,
	0x36, 0x2f, 0x1b, 0xe7, 0x56, 0x0a, 0x65, 0xc0, 0x6c, 0x5e, 0x5f, 0x5b, 0x06, 0xfd, 0x52, 0x3f,
	0xf3, 0xac, 0x15, 0xfe, 0xe5, 0xa3, 0x65, 0x22, 0x0b, 0xcc, 0xab, 0xc6, 0x4f, 0xd6, 0xff, 0xc3,
	0x7f, 0x46, 0x3d, 0x1f, 0x3e, 0xe4, 0x43, 0xcf, 0xef, 0xdf, 0x57, 0xfe, 0x6d, 0x00, 0xe2, 0xf3,
	0x28, 0x7b, 0xaa, 0x13, 0x48, 0xdf, 0x3d, 0xf5, 0xfa, 0xf7, 0x2c, 0x9e, 0x6c, 0xed, 0x95, 0xc8,
	0xfb, 0xbc, 0xa7, 0xc7, 0xfd, 0xd0, 0x31, 0x64, 0x46, 0x9d, 0xe7, 0x7e, 0xd0, 0xb9, 0x67, 0x9b,
	0xab, 0x6c, 0xad, 0x9c, 0xf0, 0xaa, 0xbc, 0xd0, 0x07, 0xbd, 0x95, 0x74, 0xcc, 0x27, 0x32, 0xd9,
	0x62, 0x5f, 0x32, 0x51, 0x24, 0xf1, 0x77, 0xd4, 0xbf, 0xf2, 0x35, 0x14, 0xb4, 0x95, 0x9f, 0x03,
	0xe3, 0x2e, 0xcc, 0xdf, 0x5d, 0xe5, 0xbf, 0x5b, 0x90, 0xa1, 0xe3, 0x5b, 0x9d, 0x11, 0xba, 0x84,
	0xe2, 0xa0, 0x33, 0xe2, 0x0d, 0x27, 0xda, 0x24, 0xea, 0xba, 0x6d, 0x75, 0x46, 0xd5, 0x56, 0x67,
	0xc4, 0x1a, 0x10, 0xbb, 0x34, 0x86, 0xd3, 0xf1, 0xb3, 0x97, 0x1f, 0xc8, 0x36, 0x09, 0xe5, 0x3a,
	0xd1, 0x66, 0x72, 0x31, 0xca, 0x75, 0xd8, 0x45, 0x41, 0x09, 0x1b, 0xba, 0x86, 0x12, 0x45, 0x71,
	0x35, 0xc4, 0xbb, 0x4e, 0x0a, 0xdb, 0x9b, 0x87, 0x71, 0x7d, 0xf0, 0x2b, 0xc7, 0xd1, 0x40, 0x64,
	0xab, 0x0c, 0x74, 0x9d, 0x78, 0x87, 0xba, 0x04, 0xe8, 0x3a, 0xfc, 0xaa, 0x02, 0x43, 0x6b, 0x08,
	0xe4, 0x8d, 0x30, 0xde, 0xcd, 0x2e, 0x00, 0xf2, 0xce, 0xd8, 0xd6, 0x22, 0x94, 0xad, 0x32, 0xd0,
	0x75, 0xe2, 0x9d, 0xef, 0x12, 0xa0, 0xeb, 0xb4, 0xb5, 0x08, 0x65, 0x2b, 0xba, 0x81, 0x32, 0x05,
	0x8a, 0x4e, 0x27, 0x6d, 0x93, 0x29, 0x72, 0x7f, 0x1e, 0x29, 0x5a, 0xad, 0xf8, 0xe0, 0x50, 0x1a,
	0x92, 0x6a, 0x57, 0xb0, 0xae, 0x23, 0x6d, 0xab, 0x97, 0x61, 0x5d, 0x47, 0x7c, 0x68, 0xd8, 0xc8,
	0x8e, 0xfe, 0x02, 0x5b, 0xec, 0xf1, 0xc3, 0x70, 0xa5, 0x7d, 0x38, 0x05, 0x1f, 0x24, 0xa4, 0x40,
	0x78, 0x84, 0x9f, 0x1c, 0x4d, 0x83, 0xd3, 0xef, 0xa8, 0x70, 0x9a, 0xdd, 0x78, 0xef, 0xbe, 0x14,
	0xee, 0x3a, 0xe1, 0xa7, 0x0e, 0x8f, 0xef, 0xa8, 0x0a, 0x0a, 0x37, 0xfb, 0xcb, 0x14, 0xc4, 0x76,
	0x09, 0x9a, 0x82, 0xf8, 0xce, 0xe1, 0x67, 0xb0, 0x62, 0x54, 0x74, 0x28, 0xa0, 0xac, 0xca, 0x02,
	0x16, 0xdf, 0x49, 0x70, 0x58, 0x61, 0xa0, 0x18, 0xd1, 0x3b, 0xa0, 0x78, 0xb6, 0xb3, 0x08, 0x0f,
	0x0f, 0x14, 0xf5, 0x7a, 0x1e, 0x45, 0x37, 0x1a, 0xf4, 0x3f, 0xe7, 0x64, 0x07, 0xb1, 0x25, 0x5a,
	0x96, 0xac, 0x0d, 0xc4, 0x47, 0x8c, 0x45, 0xcb, 0x92, 0xdd, 0xe7, 0x57, 0x69, 0x59, 0x4a, 0x56,
	0x35, 0x5d, 0xe1, 0x69, 0x64, 0x59, 0xba, 0x58, 0x77, 0xd1, 0xd2, 0xc5, 0x3b, 0x4e, 0x13, 0x0a,
	0x31, 0x8a, 0xb5, 0x5d, 0x8b, 0x91, 0xf0, 0x02, 0x12, 0x6d, 0x17, 0x1c, 0x94, 0x1b, 0x48, 0x26,
	0xe4, 0xc3, 0x2b, 0xe9, 0x0d, 0x6a, 0x3b, 0x8d, 0x12, 0x43, 0x1e, 0x2e, 0x7a, 0x97, 0x4a, 0x9d,
	0xe5, 0xf0, 0xed, 0x41, 0xe2, 0x4d, 0xf4, 0x04, 0xbb, 0x52, 0xa9, 0xd5, 0x9b, 0x24, 0x62, 0xf3,
	0x1c, 0x2d, 0xaa, 0xba, 0x6a, 0x87, 0xe4, 0x13, 0xed, 0x0c, 0x92, 0xef, 0xee, 0xbe, 0x05, 0x34,
	0x5f, 0xae, 0x69, 0xc3, 0xfb, 0xbb, 0xff, 0x2c, 0xda, 0x00, 0xfd, 0x8a, 0x36, 0x21, 0xfd, 0xb9,
	0xd3, 0x9f, 0xf9, 0xac, 0x2f, 0xa5, 0x3d, 0xfe, 0xe3, 0xc7, 0x95, 0x1f, 0x8c, 0x98, 0x20, 0x57,
	0x69, 0x99, 0x60, 0x26, 0x10, 0x4c, 0x99, 0x50, 0x87, 0xcd, 0xa4, 0xd2, 0x2c, 0x33, 0xf2, 0x09,
	0x8c, 0x7c, 0x32, 0x43, 0xa9, 0xc6, 0x32, 0x63, 0x35, 0x81, 0xb1, 0x3a, 0xcf, 0x98, 0x2b, 0xc0,
	0x32, 0xa3, 0x94, 0xc0, 0x28, 0x25, 0x33, 0x94, 0x9a, 0x2b, 0x33, 0x50, 0x02, 0x03, 0xc9, 0x8c,
	0x73, 0xd8, 0x4e, 0x2e, 0xb2, 0x32, 0x25, 0x93, 0x40, 0xc9, 0x2c, 0xa0, 0xa8, 0x35, 0x55, 0xa6,
	0xac, 0x25, 0x50, 0xd6, 0x64, 0x4a, 0x13, 0xec, 0x45, 0x05, 0x54, 0xe6, 0x14, 0x13, 0x38, 0xc5,
	0x45, 0x1c, 0xad, 0x56, 0xca, 0x1c, 0x2b, 0x81, 0x63, 0x25, 0xae, 0x36, 0xb9, 0x38, 0x7e, 0x69,
	0xbd, 0xae, 0xc8, 0x84, 0x33, 0x28, 0x27, 0x94, 0xc4, 0x2f, 0x21, 0x0c, 0x19, 0xf1, 0x07, 0xb0,
	0xf4, 0x52, 0x28, 0x8f, 0x5f, 0x4f, 0x18, 0xbf, 0x9e, 0xb0, 0x48, 0xf4, 0x0a, 0x28, 0x33, 0x36,
	0x12, 0x18, 0x1b, 0x0b, 0x12, 0x11, 0x97, 0xbd, 0x2f, 0x3d, 0x45, 0x4e, 0x26, 0x5c, 0x43, 0x69,
	0xae, 0xdc, 0x25, 0x00, 0xbe, 0x91, 0x01, 0x85, 0x5a, 0x41, 0x94, 0x9d, 0x56, 0x67, 0xc4, 0x0e,
	0x29, 0x12, 0xf0, 0x6f, 0xf0, 0xd5, 0x92, 0x62, 0x97, 0x80, 0x3e, 0x92, 0xd1, 0x0b, 0xcf, 0x68,
	0xd2, 0x0c, 0x7f, 0x85, 0xdf, 0x2c, 0x2b, 0x73, 0x09, 0x53, 0x1c, 0xa8, 0x53, 0x24, 0x9c, 0x57,
	0x63, 0xfc, 0xe1, 0x2f, 0x90, 0x95, 0x8f, 0x5a, 0x3b, 0x50, 0x6e, 0x5e, 0x7b, 0x8d, 0xcb, 0x9f,
	0xae, 0xb4, 0xa3, 0x42, 0x11, 0xb2, 0xe1, 0x0d, 0x7a, 0x64, 0x58, 0x95, 0x0d, 0xf4, 0xe8, 0x90,
	0x56, 0x0d, 0x1f, 0xad, 0xb5, 0xc3, 0x3f, 0x42, 0x46, 0x64, 0x0c, 0x59, 0x90, 0x6b, 0x9d, 0xbd,
	0xe7, 0x47, 0x10, 0x3a, 0x3c, 0xa5, 0x58, 0xe8, 0x78, 0x43, 0xb3, 0x7c, 0xb4, 0x56, 0x6a, 0xff,
	0x84, 0x6c, 0xe3, 0xee, 0x29, 0x68, 0xfb, 0xe3, 0xcf, 0xbd, 0x3b, 0x1f, 0xfd, 0x08, 0x39, 0xfa,
	0x33, 0x3a, 0x6a, 0x24, 0x1d, 0x14, 0x76, 0x93, 0x8c, 0x95, 0x14, 0xfa, 0x0e, 0xd6, 0xe9, 0xd8,
	0x56, 0x67, 0x34, 0x41, 0x05, 0xb5, 0x8b, 0xec, 0x6a, 0xbf, 0x2b, 0xa9, 0x7a, 0xe3, 0x7f, 0x6f,
	0xeb, 0x2f, 0xfe, 0x33, 0xf3, 0xdd, 0xf1, 0xa3, 0x3f, 0x3c, 0x0e, 0xff, 0xd6, 0x7c, 0x42, 0xf3,
	0xcc, 0xff, 0x96, 0xdd, 0x5d, 0x63, 0xf7, 0x4f, 0x7f, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x28, 0x98,
	0x00, 0x5d, 0xe1, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	EchoAllTypes(ctx context.Context, in *TestAllTypes, opts ...grpc.CallOption) (*TestAllTypes, error)
	EchoMaps(ctx context.Context, in *TestMap, opts ...grpc.CallOption) (*TestMap, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) EchoAllTypes(ctx context.Context, in *TestAllTypes, opts ...grpc.CallOption) (*TestAllTypes, error) {
	out := new(TestAllTypes)
	err := c.cc.Invoke(ctx, "/types.EchoService/EchoAllTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoMaps(ctx context.Context, in *TestMap, opts ...grpc.CallOption) (*TestMap, error) {
	out := new(TestMap)
	err := c.cc.Invoke(ctx, "/types.EchoService/EchoMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	EchoAllTypes(context.Context, *TestAllTypes) (*TestAllTypes, error)
	EchoMaps(context.Context, *TestMap) (*TestMap, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_EchoAllTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAllTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoAllTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.EchoService/EchoAllTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoAllTypes(ctx, req.(*TestAllTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.EchoService/EchoMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoMaps(ctx, req.(*TestMap))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoAllTypes",
			Handler:    _EchoService_EchoAllTypes_Handler,
		},
		{
			MethodName: "EchoMaps",
			Handler:    _EchoService_EchoMaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/types.proto",
}
